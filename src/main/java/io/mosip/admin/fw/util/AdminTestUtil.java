package io.mosip.admin.fw.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Type;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.KeyStore.PrivateKeyEntry;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.UnrecoverableEntryException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Properties;
import java.util.Set;
import java.util.TimeZone;
import java.util.stream.Collectors;

import javax.ws.rs.core.MediaType;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.jose4j.jws.JsonWebSignature;
import org.jose4j.lang.JoseException;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.testng.Assert;
import org.testng.Reporter;
import org.yaml.snakeyaml.Yaml;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.jknack.handlebars.Context;
import com.github.jknack.handlebars.Handlebars;
import com.github.jknack.handlebars.Template;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.opencsv.CSVReader;
import com.opencsv.CSVWriter;

import io.mosip.authentication.fw.precon.JsonPrecondtion;
import io.mosip.authentication.fw.precon.MessagePrecondtion;
import io.mosip.authentication.fw.util.ReportUtil;
import io.mosip.authentication.fw.util.RestClient;
import io.mosip.authentication.fw.util.RunConfigUtil;
import io.mosip.kernel.util.Translator;
import io.mosip.service.BaseTestCase;
import io.mosip.testrunner.MosipTestRunner;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;


/**
 * @author Sohan
 *
 */
public class AdminTestUtil extends BaseTestCase{
	
	private static final Logger logger = Logger.getLogger(AdminTestUtil.class);
	//static KernelDataBaseAccess masterDB = new KernelDataBaseAccess();
	String token = null;
	String adminAutoGeneratedIdPropFileName = "/admin/autoGeneratedId.properties";
	String masterDataAutoGeneratedIdPropFileName = "/masterdata/autoGeneratedId.properties";
	String syncDataAutoGeneratedIdPropFileName = "/syncdata/autoGeneratedId.properties";
	String preregAutoGeneratedIdPropFileName = "/preReg/autoGeneratedId.properties";
	String partnerAutoGeneratedIdPropFileName = "/partner/autoGeneratedId.properties";
	String idrepoAutoGeneratedIdPropFileName = "/idRepository/autoGeneratedId.properties";
	String residentAutoGeneratedIdPropFileName = "/resident/autoGeneratedId.properties";
	String authAutoGeneratedIdPropFileName = "/ida/autoGeneratedId.properties";
	String regProcAutoGeneratedIdPropFileName = "/regProc/autoGeneratedId.properties";
	public static final String resourceFolderName="MosipTemporaryTestResource";
	public static String genertedUIN=null;
	public static String generatedRid=null;
	public static String regDeviceResponse=null;
	public static String generatedVID=null;
	public static final String AUTHORIZATHION_HEADERNAME="Authorization";
	public static final String authHeaderValue="Some String";
	public static final String SIGNATURE_HEADERNAME="signature";
	public static Properties props = getproperty(MosipTestRunner.getResourcePath() + "/"+"config/application.properties");
	public static Properties propsBio = getproperty(MosipTestRunner.getGlobalResourcePath() + "/"+"config/bioValue.properties");
	public static Properties propsKernel = getproperty(MosipTestRunner.getResourcePath() + "/"+"config/Kernel.properties");
	public static BioDataUtility bioDataUtil = new BioDataUtility();
	public static EncryptionDecrptionUtil encryptDecryptUtil = new EncryptionDecrptionUtil();
	public static String idField=null;
	public static String aspNetCoreSessionId = null;
	
	
	/** The Constant SIGN_ALGO. */
	private static final String SIGN_ALGO = "RS256";
	
	
	/**
	 * This method will hit post request and return the response
	 * @param url
	 * @param jsonInput
	 * @param cookieName
	 * @param role
	 * @return Response
	 */
	protected Response postWithBodyAndCookie(String url, String jsonInput, String cookieName, String role, String testCaseName) {
		Response response=null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			  response = RestClient.postRequestWithCookie(url, inputJson, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token);
			  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
						+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	
	protected Response postWithBodyAndCookie(String url, String jsonInput, String cookieName,String cookieName1, String cookieValue1,String role, String testCaseName) {
		Response response=null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			  response = RestClient.postRequestWithCookie(url, inputJson, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token, cookieName1, cookieValue1);
			  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
						+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	
	protected Response postRequestWithCookieAuthHeaderAndSignature(String url, String jsonInput, String cookieName, String role, String testCaseName) {
		Response response=null;
		String uriParts[] = url.split("/");
		String partnerId = uriParts[uriParts.length-2];
		HashMap<String, String> headers = new HashMap<String, String>();
		headers.put(AUTHORIZATHION_HEADERNAME, authHeaderValue);
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		headers.put( SIGNATURE_HEADERNAME, generateSignatureWithRequest(inputJson, null, partnerId));
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			  response = RestClient.postRequestWithMultipleHeaders(url, inputJson, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token, headers);
			  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
						+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	
	protected Response patchRequestWithCookieAuthHeaderAndSignature(String url, String jsonInput, String cookieName, String role, String testCaseName) {
		Response response=null;
		HashMap<String, String> headers = new HashMap<String, String>();
		headers.put(AUTHORIZATHION_HEADERNAME, authHeaderValue);
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		headers.put( SIGNATURE_HEADERNAME, generateSignatureWithRequest(inputJson, null, null));
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Patch request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			  response = RestClient.patchRequestWithMultipleHeaders(url, inputJson, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token, headers);
			  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
						+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	protected Response postRequestWithAuthHeaderAndSignature(String url, String jsonInput, String testCaseName) {
		Response response=null;
		String uriParts[] = url.split("/");
		String partnerId = uriParts[uriParts.length-2];
		HashMap<String, String> headers = new HashMap<String, String>();
		headers.put(AUTHORIZATHION_HEADERNAME, authHeaderValue);
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		headers.put( SIGNATURE_HEADERNAME, generateSignatureWithRequest(inputJson, null, partnerId));
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			  response = RestClient.postRequestWithMultipleHeadersWithoutCookie(url, inputJson, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, headers);
			  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
						+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	
	protected Response postRequestWithCookieAndHeader(String url, String jsonInput, String cookieName, String role, String testCaseName) {
		Response response=null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			  response = RestClient.postRequestWithCookieAndHeader(url, inputJson, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token, AUTHORIZATHION_HEADERNAME, authHeaderValue);
			  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
						+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	
	protected Response patchRequestWithCookieAndHeader(String url, String jsonInput, String cookieName, String role, String testCaseName) {
		Response response=null;
		if(url.contains("ID:"))
			url = inputJsonKeyWordHandeler(url, testCaseName );
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			  response = RestClient.patchRequestWithCookieAndHeader(url, inputJson, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token, AUTHORIZATHION_HEADERNAME, authHeaderValue);
			  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
						+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	
	protected Response patchWithBodyAndCookie(String url, String jsonInput, String cookieName, String role, String testCaseName) {
		Response response=null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			  response = RestClient.patchRequestWithCookie(url, inputJson, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token);
			  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
						+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	
	protected Response postWithBodyAndCookieForAutoGeneratedId(String url, String jsonInput, String cookieName, String role, String testCaseName, String idKeyName) {
		Response response=null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			  response = RestClient.postRequestWithCookie(url, inputJson, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token);
			  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
						+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			  
			  if(testCaseName.toLowerCase().contains("_sid"))
			  {
				  writeAutoGeneratedId(response, idKeyName, testCaseName);
			  }
				  
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	
	protected Response patchWithBodyAndCookieWithAutoGeneratedId(String url, String jsonInput, String cookieName, String role, String testCaseName,String idKeyName) {
		Response response=null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			  response = RestClient.patchRequestWithCookie(url, inputJson, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token);
			  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
						+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			  if(testCaseName.toLowerCase().contains("_sid"))
			  {
				  writeAutoGeneratedId(response, idKeyName, testCaseName);
			  }
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	
	protected Response patchWithBodyAndCookieForAutoGeneratedId(String url, String jsonInput, String cookieName, String role, String testCaseName, String idKeyName) {
		Response response=null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			  response = RestClient.patchRequestWithCookie(url, inputJson, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token);
			  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
						+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			  
			  if(testCaseName.toLowerCase().contains("_sid"))
			  {
				  writeAutoGeneratedId(response, idKeyName, testCaseName);
			  }
				  
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	
	protected Response getWithPathParamAndCookieForAutoGeneratedId(String url, String jsonInput, String cookieName, String role, String testCaseName, String idKeyName) {
		Response response=null;
		jsonInput = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(jsonInput, new TypeToken<HashMap<String, String>>(){}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: "+jsonInput+" Exception: "+e.getMessage());
		}
	
	token = kernelAuthLib.getTokenByRole(role);
	logger.info("******get request to EndPointUrl: " + url + " *******");
	Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(jsonInput) + "</pre>");
	try {    
		if(url.contains("{") || url.contains("?")) {
			response = RestClient.getRequestWithCookieAndPathParm(url, map, MediaType.APPLICATION_JSON,
					MediaType.APPLICATION_JSON, cookieName, token);
			if(testCaseName.toLowerCase().contains("_sid"))
			  {
				  writeAutoGeneratedId(response, idKeyName, testCaseName);
			  }
		}
		else {
			response = RestClient.getRequestWithCookie(url, MediaType.APPLICATION_JSON,
					MediaType.APPLICATION_JSON, cookieName, token);
			if(testCaseName.toLowerCase().contains("_sid"))
			  {
				  writeAutoGeneratedId(response, idKeyName, testCaseName);
			  }
		}
		Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
				+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
		return response;
		
	} catch (Exception e) {
		logger.error("Exception " + e);
		return response;
	}
}
	
	
	
	protected Response postWithFormPathParamAndFile(String url, String jsonInput, String cookieName, String role, String testCaseName, String idKeyName) {
		Response response=null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		JSONObject req = new JSONObject(inputJson);
		HashMap<String, String> formParams = new HashMap<String, String>();
		HashMap<String, String> pathParams = new HashMap<String, String>();
		
		File filetoUpload = null;
		String fileKeyName = null;
		if(req.has("filePath") && req.has("fileKeyName") ) {
		 filetoUpload = new File(getResourcePath() + req.get("filePath").toString());
		 req.remove("filePath");
		 fileKeyName = req.get("fileKeyName").toString();
		 req.remove("fileKeyName");
		}
		else 
			logger.error("request doesn't contanin filePath and fileKeyName: "+inputJson);
		pathParams.put("preRegistrationId", req.get("preRegistrationId").toString());
		req.remove("preRegistrationId");
		formParams.put("Document request", req.toString());
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.postWithFormPathParamAndFile(url, formParams, pathParams, filetoUpload, fileKeyName,
						MediaType.MULTIPART_FORM_DATA, token);
			  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
						+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			  
			  if(testCaseName.toLowerCase().contains("_sid"))
			  {
				  writeAutoGeneratedId(response, idKeyName, testCaseName);
			  }
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	
	protected Response postWithFormDataAndFile(String url, String jsonInput, String cookieName, String role, String testCaseName,String idKeyName) {
		Response response=null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);

		JSONObject req = new JSONObject(inputJson);
		HashMap<String, String> formParams = new HashMap<String, String>();
		formParams.put("category", req.getString("category"));
		formParams.put("operation", req.getString("operation"));
		formParams.put("tableName", req.getString("tableName"));
		
		String absolueFilePath=null;
		JSONArray josnArray=req.getJSONArray("files");
		for(int index=0;index<josnArray.length();index++) {
			String csvFilePath=(String)josnArray.get(index);
			 absolueFilePath=getResourcePath()+csvFilePath;
		}
		 token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.postWithFormDataAndFile(url, formParams, absolueFilePath,
					MediaType.MULTIPART_FORM_DATA, token);
			  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
						+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			  if(testCaseName.toLowerCase().contains("_sid"))
			  {
				  writeAutoGeneratedId(response, idKeyName, testCaseName);
			  }
			  
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	
	protected Response postWithMultipartFormDataAndFile(String url, String jsonInput, String cookieName, String role, String testCaseName,String idKeyName) {
		Response response=null;
		
		jsonInput = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		jsonInput = jsonInput.replace("\r\n", "");
		 
		HashMap<String, String> formParams = new HashMap<String, String>();
		formParams.put("NotificationRequestDTO", jsonInput);
		if(BaseTestCase.languageList.size()==1) formParams.put("langCode", BaseTestCase.languageList.get(0));
		else if(BaseTestCase.languageList.size()==2) formParams.put("langCode", BaseTestCase.languageList.get(0)+","+BaseTestCase.languageList.get(1));
		else formParams.put("langCode", BaseTestCase.languageList.get(0)+","+BaseTestCase.languageList.get(1)+","+BaseTestCase.languageList.get(2));
		formParams.put("attachment", "");
		
		/* String absolueFilePath = null; */
		/*
		 * JSONArray josnArray = req.getJSONArray("files"); for (int index = 0; index <
		 * josnArray.length(); index++) { String csvFilePath = (String)
		 * josnArray.get(index); absolueFilePath = getResourcePath() + csvFilePath; if
		 * (formParams.get("category").equalsIgnoreCase("masterData")) { absolueFilePath
		 * = StringUtils.substringBefore(absolueFilePath, "FilesToUpload") +
		 * "FilesToUpload"; } }
		 */
		/*
		 * File file = new File(absolueFilePath); File[] listFiles = file.listFiles();
		 */
		/*
		 * for (File specificFile : listFiles) { if
		 * (formParams.get("operation").equalsIgnoreCase("insert") &&
		 * specificFile.getName().equals(formParams.get("tableName") + ".csv")) {
		 * specificFile=updateCSV(specificFile.getAbsolutePath(),"OLD",1,0); listFiles =
		 * new File[1]; listFiles[0] = specificFile; } else { if
		 * (formParams.get("operation").equalsIgnoreCase("update") &&
		 * specificFile.getName().equalsIgnoreCase("update" +
		 * formParams.get("tableName") + ".csv")) { listFiles = new File[1];
		 * listFiles[0] = specificFile; } } }
		 */
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(jsonInput) + "</pre>");
		
		try {
			response = RestClient.postWithMultipartFormDataAndFile(url, formParams,
					MediaType.MULTIPART_FORM_DATA, token);
			  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
						+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			  if(testCaseName.toLowerCase().contains("_sid"))
			  {
				  writeAutoGeneratedId(response, idKeyName, testCaseName);
			  }
			  
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	
	protected Response postWithFormDataAndMultipleFile(String url, String jsonInput, String cookieName, String role, String testCaseName,String idKeyName) {
		Response response=null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);

		JSONObject req = new JSONObject(inputJson);
		HashMap<String, String> formParams = new HashMap<String, String>();
		formParams.put("category", req.getString("category"));
		formParams.put("operation", req.getString("operation"));
		formParams.put("tableName", req.getString("tableName"));
		
		String absolueFilePath = null;
		JSONArray josnArray = req.getJSONArray("files");
		for (int index = 0; index < josnArray.length(); index++) {
			String csvFilePath = (String) josnArray.get(index);
			absolueFilePath = getResourcePath() + csvFilePath;
			if (formParams.get("category").equalsIgnoreCase("masterData")) {
				absolueFilePath = StringUtils.substringBefore(absolueFilePath, "FilesToUpload") + "FilesToUpload";
			}
		}
		File file = new File(absolueFilePath);
		File[] listFiles = file.listFiles();
		for (File specificFile : listFiles) {
			if (formParams.get("operation").equalsIgnoreCase("insert")
					&& specificFile.getName().equals(formParams.get("tableName") + ".csv")) {
				specificFile=updateCSV(specificFile.getAbsolutePath(),"OLD",1,0);
				listFiles = new File[1];
				listFiles[0] = specificFile;
			} else {
				if (formParams.get("operation").equalsIgnoreCase("update")
						&& specificFile.getName().equalsIgnoreCase("update" + formParams.get("tableName") + ".csv")) {
					listFiles = new File[1];
					listFiles[0] = specificFile;
				}
			}
		}
		 token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.postWithFormDataAndMultipleFile(url, formParams, listFiles,
					MediaType.MULTIPART_FORM_DATA, token);
			  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
						+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			  if(testCaseName.toLowerCase().contains("_sid"))
			  {
				  writeAutoGeneratedId(response, idKeyName, testCaseName);
			  }
			  
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	
	/**
	 * This method will hit put request and return the response
	 * @param url
	 * @param jsonInput
	 * @param cookieName
	 * @param role
	 * @return Response
	 */
	protected Response putWithBodyAndCookie(String url, String jsonInput, String cookieName, String role, String testCaseName) {
		Response response=null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Put request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			  response = RestClient.putRequestWithCookie(url, inputJson, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token);
			  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
						+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	
	protected Response putWithPathParamAndCookie(String url, String jsonInput, String cookieName, String role, String testCaseName) {
		Response response=null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(inputJson, new TypeToken<HashMap<String, String>>(){}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: "+jsonInput+" Exception: "+e.getMessage());
		}
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Put request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			  response = RestClient.putRequestWithParm(url, map, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token);
			  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
						+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	
	protected Response patchWithPathParamAndCookie(String url, String jsonInput, String cookieName, String role, String testCaseName) {
		Response response=null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(inputJson, new TypeToken<HashMap<String, String>>(){}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: "+inputJson+" Exception: "+e.getMessage());
		}
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Put request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			  response = RestClient.patchRequestWithParm(url, map, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token);
			  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
						+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	
	protected Response putWithPathParamsBodyAndCookie(String url, String jsonInput, String cookieName, String role, String testCaseName, String pathParams) {
		Response response=null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		JSONObject req = new JSONObject(inputJson);
		HashMap<String, String> pathParamsMap = new HashMap<String, String>();
		String params[] = pathParams.split(",");
		for(String param: params)
		{
			if(req.has(param)) {
				 pathParamsMap.put(param, req.get(param).toString());
				 req.remove(param);
			}
			else 
			logger.error("request doesn't contanin param: "+param+" in: "+inputJson);
		}
		
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******put request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			if(testCaseName.toLowerCase().contains("dynamic"))
				pathParamsMap.put("id", idField);
			response = RestClient.putWithPathParamsBodyAndCookie(url, pathParamsMap, req.toString(), MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token);
			  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
						+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	protected Response postWithPathParamsBodyAndCookie(String url, String jsonInput, String cookieName, String role, String testCaseName, String pathParams) {
		Response response=null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		JSONObject req = new JSONObject(inputJson);
		HashMap<String, String> pathParamsMap = new HashMap<String, String>();
		String params[] = pathParams.split(",");
		for(String param: params)
		{
			if(req.has(param)) {
				 pathParamsMap.put(param, req.get(param).toString());
				 req.remove(param);
			}
			else 
			logger.error("request doesn't contanin param: "+param+" in: "+inputJson);
		}
		
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.postWithPathParamsBodyAndCookie(url, pathParamsMap, req.toString(), MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token);
			  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
						+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	
	
	protected Response patchWithPathParamsBodyAndCookie(String url, String jsonInput, String cookieName, String role, String testCaseName, String pathParams) {
		Response response=null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		JSONObject req = new JSONObject(inputJson);
		HashMap<String, String> pathParamsMap = new HashMap<String, String>();
		String params[] = pathParams.split(",");
		for(String param: params)
		{
			if(req.has(param)) {
				 pathParamsMap.put(param, req.get(param).toString());
				 req.remove(param);
			}
			else 
			logger.error("request doesn't contanin param: "+param+" in: "+inputJson);
		}
		
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******put request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(req.toString()) + "</pre>");
		try {
			response = RestClient.patchWithPathParamsBodyAndCookie(url, pathParamsMap, req.toString(), MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token);
			  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
						+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	
	/**
	 * This method will hit get request and return the response
	 * @param url
	 * @param jsonInput
	 * @param cookieName
	 * @param role
	 * @return Response
	 */
	protected Response getWithPathParamAndCookie(String url, String jsonInput, String cookieName, String role, String testCaseName) {
			Response response=null;
			jsonInput = inputJsonKeyWordHandeler(jsonInput, testCaseName);
			HashMap<String, String> map = null;
			try {
				map = new Gson().fromJson(jsonInput, new TypeToken<HashMap<String, String>>(){}.getType());
			} catch (Exception e) {
				logger.error("Not able to convert jsonrequet to map: "+jsonInput+" Exception: "+e.getMessage());
			}
		
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******get request to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(jsonInput) + "</pre>");
		try {    
			if(url.contains("{") || url.contains("?")) {
				response = RestClient.getRequestWithCookieAndPathParm(url, map, MediaType.APPLICATION_JSON,
						MediaType.APPLICATION_JSON, cookieName, token);
			}
			else {
				response = RestClient.getRequestWithCookie(url, MediaType.APPLICATION_JSON,
						MediaType.APPLICATION_JSON, cookieName, token);
			}
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
			
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}
	
	protected Response deleteWithPathParamAndCookie(String url, String jsonInput, String cookieName, String role, String testCaseName) {
		Response response=null;
		jsonInput = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(jsonInput, new TypeToken<HashMap<String, String>>(){}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: "+jsonInput+" Exception: "+e.getMessage());
		}
	
	token = kernelAuthLib.getTokenByRole(role);
	logger.info("******get request to EndPointUrl: " + url + " *******");
	Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(jsonInput) + "</pre>");
	try {
		
		response = RestClient.deleteRequestWithCookieAndPathParm(url, map, MediaType.APPLICATION_JSON,
				MediaType.APPLICATION_JSON, cookieName, token);
		Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
				+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
		return response;
		 
	} catch (Exception e) {
		logger.error("Exception " + e);
		return response;
	}
}
	
	protected byte[] getWithPathParamAndCookieForPdf(String url, String jsonInput, String cookieName, String role, String testCaseName) {
		byte[] pdf=null;
		jsonInput = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(jsonInput, new TypeToken<HashMap<String, String>>(){}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: "+jsonInput+" Exception: "+e.getMessage());
		}
	
	token = kernelAuthLib.getTokenByRole(role);
	logger.info("******get request to EndPointUrl: " + url + " *******");
	Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(jsonInput) + "</pre>");
	try {
		pdf=RestClient.getPdf(url, map, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token);
		return pdf;
	} catch (Exception e) {
		logger.error("Exception " + e);
		return pdf;
	}
}
	
	
	protected Response getWithQueryParamAndCookie(String url, String jsonInput, String cookieName, String role, String testCaseName) {
		Response response=null;
		jsonInput = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(jsonInput, new TypeToken<HashMap<String, String>>(){}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: "+jsonInput+" Exception: "+e.getMessage());
		}
	
	token = kernelAuthLib.getTokenByRole(role);
	logger.info("******get request to EndPointUrl: " + url + " *******");
	Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(jsonInput) + "</pre>");
	try {
		response = RestClient.getRequestWithCookieAndQueryParm(url, map, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token);
		Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
		return response;
	} catch (Exception e) {
		logger.error("Exception " + e.getMessage());
		return response;
	}
}

	protected Response PatchWithQueryParamAndCookie(String url, String jsonInput, String cookieName, String role, String testCaseName) {
		Response response=null;
		jsonInput = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(jsonInput, new TypeToken<HashMap<String, String>>(){}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: "+jsonInput+" Exception: "+e.getMessage());
		}
	
	token = kernelAuthLib.getTokenByRole(role);
	logger.info("******get request to EndPointUrl: " + url + " *******");
	Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(jsonInput) + "</pre>");
	try {
		  response = RestClient.patchRequestWithCookieAndQueryParm(url, map, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token);
		  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
		return response;
	} catch (Exception e) {
		logger.error("Exception " + e.getMessage());
		return response;
	}
}
	
	void writeAutoGeneratedId(Response response, String idKeyName, String testCaseName)
	{
		String fileName = getAutoGenIdFileName(testCaseName);
		JSONObject responseJson = null;
		FileOutputStream outputStrem = null;
		FileInputStream inputStrem = null;
		Properties props = new Properties();
		try {
			
			responseJson = new JSONObject(response.getBody().asString()).getJSONObject("response");
			inputStrem = new FileInputStream(getResourcePath()+fileName);
			props.load(inputStrem);
			String fieldNames[] = idKeyName.split(",");
			for (String filedName : fieldNames) {
				if (responseJson != null) {
					String identifierKeyName = getAutogenIdKeyName(testCaseName, filedName);
					if (responseJson.has(filedName))
						props.put(identifierKeyName, responseJson.get(filedName).toString());
					else
						props.put(identifierKeyName, responseJson.getJSONObject("identity").get(filedName));
				} else {
					logger.error("Response doesn't contain autogenerated field: " + filedName + " to write- Response : "
							+ response.asString());
				}
			}
			outputStrem = new FileOutputStream(getResourcePath()+fileName);
			props.store(outputStrem, "autogenerated fields");
			logger.info("added autogenerated fields to property: "+getResourcePath()+fileName);
		} catch (JSONException | IOException e) {
			logger.error("Exception while getting autogenerated id and writing in property file:" + e.getMessage());
		}

	}
	public void writeAutoGeneratedId(String testCaseName, String idName, String value)
	{
		if(testCaseName == null || idName == null || value == null)
			{
				logger.error("autogenerated id is not stored as few details not available");
				return ;
			}
			String fileName = getAutoGenIdFileName(testCaseName);
			String identifierKeyName = getAutogenIdKeyName(testCaseName, idName);
			FileOutputStream outputStream = null;
			FileInputStream inputStream = null;
			Properties props = new Properties();
			try {
				inputStream = new FileInputStream(getResourcePath()+fileName);
				props.load(inputStream);
				props.put(identifierKeyName, value);
				outputStream = new FileOutputStream(getResourcePath()+fileName);
				props.store(outputStream, "autogenerated fields");
				logger.info("added autogenerated fields to property: "+getResourcePath()+fileName);
			} catch (JSONException | IOException e) {
				logger.error("Exception while getting autogenerated id and writing in property file:" + e.getMessage());
			}
	}

	/**
	 * @param testCaseName
	 * @param fieldName
	 * @return testCaseName_fieldname
	 */
	public String getAutogenIdKeyName(String testCaseName, String fieldName)
	{
		if(testCaseName == null) return null;
		int indexof_= testCaseName.indexOf("_");
		String autogenIdKeyName = testCaseName.substring(indexof_+1);
		autogenIdKeyName = autogenIdKeyName+"_"+fieldName;
		logger.info("key for testCase: "+testCaseName+" : "+autogenIdKeyName);
		return autogenIdKeyName;
	}
	
	
	public static String getGlobalResourcePath() {
		return MosipTestRunner.getGlobalResourcePath();
	}
	
	public static String getResourcePath() {
		return getGlobalResourcePath()+"/"+resourceFolderName+"/";
	}
	
	public static void initiateAdminTest() {
		copyAdminTestResource();
	}
	
	public static void initiateMasterDataTest() {
		copyMasterDataTestResource();
	}
	
	public static void initiateSyncDataTest() {
		copySyncDataTestResource();
	}
	
	public static void copyAdminTestResource() {
		try {
			File source = new File(getGlobalResourcePath() + "/admin");
			File destination = new File(getGlobalResourcePath() + "/"+RunConfigUtil.resourceFolderName);
			FileUtils.copyDirectoryToDirectory(source, destination);
			logger.info("Copied the admin test resource successfully");
		} catch (Exception e) {
			logger.error("Exception occured while copying the file: "+e.getMessage());
		}
	}
	
	public static void copyMasterDataTestResource() {
		try {
			//File source = new File(getGlobalResourcePath() + "/masterdata");
			//File destination = new File(getGlobalResourcePath() + "/"+RunConfigUtil.resourceFolderName);
			
			File source = new File(RunConfigUtil.getGlobalResourcePath() + "/masterdata");
			File destination = new File(RunConfigUtil.getGlobalResourcePath() + "/"+RunConfigUtil.resourceFolderName);
			FileUtils.copyDirectoryToDirectory(source, destination);
			logger.info("Copied the Masterdata test resource successfully");
		} catch (Exception e) {
			logger.error("Exception occured while copying the file: "+e.getMessage());
		}
	}
	
	public static void copySyncDataTestResource() {
		try {
			File source = new File(RunConfigUtil.getGlobalResourcePath() + "/syncdata");
			File destination = new File(RunConfigUtil.getGlobalResourcePath() + "/"+RunConfigUtil.resourceFolderName);
			FileUtils.copyDirectoryToDirectory(source, destination);
			logger.info("Copied the admin test resource successfully");
		} catch (Exception e) {
			logger.error("Exception occured while copying the file: "+e.getMessage());
		}
	}
	
	public static void initiateKernelTest()
	{
		try {
			File source = new File(getGlobalResourcePath() + "/kernel");
			File destination = new File(getGlobalResourcePath() + "/"+RunConfigUtil.resourceFolderName);
			FileUtils.copyDirectoryToDirectory(source, destination);
			logger.info("Copied the kernel test resource successfully");
		} catch (Exception e) {
			logger.error("Exception occured while copying the file: "+e.getMessage());
		}
	}
	
	public static void initiateregProcTest()
	{
		try {
			File source = new File(RunConfigUtil.getGlobalResourcePath() + "/regProc");
			File destination = new File(RunConfigUtil.getGlobalResourcePath() + "/"+RunConfigUtil.resourceFolderName);
			FileUtils.copyDirectoryToDirectory(source, destination);
			logger.info("Copied the regProc test resource successfully");
		} catch (Exception e) {
			logger.error("Exception occured while copying the file: "+e.getMessage());
		}
	}
	
	public Object[] getYmlTestData(String ymlPath){
		String testType = testLevel;
		final ObjectMapper mapper = new ObjectMapper();
		List<TestCaseDTO> testCaseDTOList = new LinkedList<TestCaseDTO>();
		Map<String, Map<String, Map<String, String>>> scriptsMap = loadyaml(ymlPath);
		for (String key : scriptsMap.keySet()) {
			Map<String, Map<String, String>> testCases = scriptsMap.get(key);
			if(testType.equalsIgnoreCase("smoke")){
				testCases = testCases.entrySet().stream().filter(mapElement -> mapElement.getKey().toLowerCase().contains("smoke")).collect(Collectors.toMap(mapElement -> mapElement.getKey(), mapElement -> mapElement.getValue()));
			}
			for (String testCase : testCases.keySet()) {
				TestCaseDTO testCaseDTO = mapper.convertValue(testCases.get(testCase), TestCaseDTO.class);
						testCaseDTO.setTestCaseName(testCase);
						testCaseDTOList.add(testCaseDTO);
			}
		}
		return testCaseDTOList.toArray();
	}
	
	@SuppressWarnings("unchecked")
	protected Map<String,Map<String, Map<String, String>>> loadyaml(String path) {
		Map<String,Map<String, Map<String, String>>> scriptsMap = null;
		try {
			Yaml yaml = new Yaml();
			InputStream inputStream = new FileInputStream(
					new File(getResourcePath() + path).getAbsoluteFile());
		scriptsMap = (Map<String,Map<String, Map<String, String>>>) yaml.load(inputStream);
		} catch (Exception e) {
			logger.error(e.getMessage());
			return null;
		}
		return scriptsMap;
	}	
	
	public String getJsonFromTemplate(String input, String template)
	{
		String resultJson = null;
		try {
			Handlebars handlebars = new Handlebars();
			Gson gson = new Gson();
			Type type = new TypeToken<Map<String, Object>>(){}.getType();
			Map<String, Object> map = gson.fromJson(input, type);   
			String templateJsonString = new String(Files.readAllBytes(Paths.get(getResourcePath()+template+".hbs")), "UTF-8");
			Template compiledTemplate = handlebars.compileInline(templateJsonString);
			Context context = Context.newBuilder(map).build();
			resultJson = compiledTemplate.apply(context);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return resultJson;
	}

	String inputJsonKeyWordHandeler(String jsonString, String testCaseName)
	{
		if(jsonString==null)
		{
			logger.info(" Request Json String is :"+jsonString);
			return jsonString;
		}
		if(jsonString.contains("$TIMESTAMP$"))
			jsonString = jsonString.replace("$TIMESTAMP$", generateCurrentUTCTimeStamp());
		
		if(jsonString.contains("$TIMESTAMPL$"))
			jsonString = jsonString.replace("$TIMESTAMPL$", generateCurrentLocalTimeStamp());
		if(jsonString.contains("$RID$"))
			jsonString = jsonString.replace("$RID$", genRid);
		if(jsonString.contains("$RIDDEL$"))
			jsonString = jsonString.replace("$RIDDEL$", genRidDel);
		if(jsonString.contains("$PUBLICKEY$"))
			jsonString = jsonString.replace("$PUBLICKEY$", MosipTestRunner.generatePulicKey());
		if(jsonString.contains("$REMOVE$")) 
			jsonString = removeObject(new JSONObject(jsonString));
		if(jsonString.contains("$ID:")) {
			String autoGenIdFileName = getAutoGenIdFileName(testCaseName);
			jsonString = replaceIdWithAutogeneratedId(jsonString, "$ID:", autoGenIdFileName);
		}
		return jsonString;
	}
	
	public String getAutoGenIdFileName(String testCaseName)
	{
		if(testCaseName == null) return null;
		if(testCaseName.toLowerCase().startsWith("admin"))
			return adminAutoGeneratedIdPropFileName;
		else if(testCaseName.toLowerCase().startsWith("master"))
			return masterDataAutoGeneratedIdPropFileName;
		else if(testCaseName.toLowerCase().startsWith("sync"))
			return syncDataAutoGeneratedIdPropFileName;
		else if(testCaseName.toLowerCase().startsWith("prereg"))
			return preregAutoGeneratedIdPropFileName;
		else if(testCaseName.toLowerCase().startsWith("partner"))
			return partnerAutoGeneratedIdPropFileName;
		else if(testCaseName.toLowerCase().startsWith("idrepo"))
			return idrepoAutoGeneratedIdPropFileName;
		else if(testCaseName.toLowerCase().startsWith("resident"))
			return residentAutoGeneratedIdPropFileName;
		else if(testCaseName.toLowerCase().startsWith("regproc"))
			return regProcAutoGeneratedIdPropFileName;
		else if(testCaseName.toLowerCase().startsWith("auth"))
			return authAutoGeneratedIdPropFileName;
		return null;
	}
	
	public String getAutoGeneratedFieldValue(String inputFromYml, String testCaseName) {
		String autoGenIdFileName = getAutoGenIdFileName(testCaseName);
		if(!inputFromYml.contains("$ID:"))
			return "Input doesn't contain autogenerateIdKey";
		String keyForIdProperty = StringUtils.substringBetween(inputFromYml, "$ID:", "$");
		Properties props = new Properties();
			try {
				FileInputStream inputStrem = new FileInputStream(getResourcePath()+autoGenIdFileName);
				props.load(inputStrem);
			} catch (IOException e) {
				logger.error("Exception while loading the autogenerated id: "+e.getMessage());
			}
			String autoGeneratedFieldValue = props.getProperty(keyForIdProperty);
			return autoGeneratedFieldValue;
	}
	public String updateTimestampOtp(String otpIdentyEnryptRequest) {
		otpIdentyEnryptRequest = JsonPrecondtion.parseAndReturnJsonContent(otpIdentyEnryptRequest, generateCurrentUTCTimeStamp(), "identityRequest.timestamp");
		if(proxy)
			otpIdentyEnryptRequest = JsonPrecondtion.parseAndReturnJsonContent(otpIdentyEnryptRequest, props.getProperty("proxyOTP"), "identityRequest.otp");
		else return  otpIdentyEnryptRequest;
		
		return otpIdentyEnryptRequest;
	}
	public static String generateCurrentUTCTimeStamp() {
		Date date = new Date();
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
		dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
		return dateFormat.format(date);
	}
	private String generateCurrentLocalTimeStamp()
	{
		Date date = new Date();
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
		return dateFormat.format(date);
	}
	private String replaceIdWithAutogeneratedId(String jsonString, String idKey, String autoGenIdFileName)
	{
		if(!jsonString.contains(idKey))
			return jsonString;
		else {
			String keyForIdProperty = StringUtils.substringBetween(jsonString, idKey, "$");
			String keyToReplace = idKey+keyForIdProperty+"$";
			Properties props = new Properties();
				try {
					FileInputStream inputStrem = new FileInputStream(getResourcePath()+autoGenIdFileName);
					props.load(inputStrem);
				} catch (IOException e) {
					logger.error("Exception while loading the autogenerated id: "+e.getMessage());
				}
				if(keyForIdProperty.contains("time_slot_from")) {
					String time = props.getProperty(keyForIdProperty);
					if(time.compareTo("12:00")>=0) time+=" PM";
					else time+=" AM";
					jsonString = jsonString.replace(keyToReplace, time);
				}else jsonString = jsonString.replace(keyToReplace, props.getProperty(keyForIdProperty));
				
				jsonString =replaceIdWithAutogeneratedId(jsonString, idKey, autoGenIdFileName);
		}
		return jsonString;
	}
	
	public String removeObject(JSONObject object) {
		Iterator<String> keysItr = object.keys();
		while (keysItr.hasNext()) {
			String key = keysItr.next();
			Object value = object.get(key);
			if (value instanceof JSONArray) {
				JSONArray array = (JSONArray) value;
				String finalarrayContent = "";
				if (array.length() != 0) {
					for (int i = 0; i < array.length(); ++i) {
						if (!array.toString().contains("{") && !array.toString().contains("}")) {
							Set<String> arr = new HashSet<String>();
							for (int k = 0; k < array.length(); k++) {
								arr.add(array.getString(k));
							}
							finalarrayContent = removObjectFromArray(arr);
						} else {
							String arrayContent = removeObject(new JSONObject(array.get(i).toString()),finalarrayContent);
							if (!arrayContent.equals("{}"))
								finalarrayContent = finalarrayContent + "," + arrayContent;
						}
					}
					finalarrayContent = finalarrayContent.substring(1, finalarrayContent.length());
					object.put(key, new JSONArray("[" + finalarrayContent + "]"));
				} else
					object.put(key, new JSONArray("[]"));

			} else if (value instanceof JSONObject) {
				String objectContent = removeObject(new JSONObject(value.toString()));
				object.put(key, new JSONObject(objectContent));
			}
			if (value.toString().equals("$REMOVE$")) {
				object.remove(key);
				keysItr = object.keys();
			}
		}
		return object.toString();
	}
	private String removeObject(JSONObject object, String tempArrayContent) {
		Iterator<String> keysItr = object.keys();
		while (keysItr.hasNext()) {
			String key = keysItr.next();
			Object value = object.get(key);
			if (value instanceof JSONArray) {
				JSONArray array = (JSONArray) value;
				for (int i = 0; i < array.length(); ++i) {
					String arrayContent = removeObject(new JSONObject(array.get(i).toString()));
					object.put(key, new JSONArray("[" + arrayContent + "]"));
				}
			} else if (value instanceof JSONObject) {
				String objectContent = removeObject(new JSONObject(value.toString()));
				object.put(key, new JSONObject(objectContent));
			}
			if (value.toString().equals("$REMOVE$")) {
				object.remove(key);
				keysItr = object.keys();
			}
		}
		return object.toString();
	}
	private String removObjectFromArray(Set<String> content) {
		String array = "[";
		for (String str : content) {
			if (!str.contains("$REMOVE$"))
				array = array + '"' + str + '"' + ",";
		}
		array = array.substring(0, array.length() - 1);
		array = array + "]";
		return array;
	}
	
	protected Response postWithOnlyPathParamAndCookie(String url, String jsonInput, String cookieName, String role, String testCaseName) {
		Response response=null;
		jsonInput = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(jsonInput, new TypeToken<HashMap<String, String>>(){}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: "+jsonInput+" Exception: "+e.getMessage());
		}
	
	token = kernelAuthLib.getTokenByRole(role);
	logger.info("******get request to EndPointUrl: " + url + " *******");
	Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(jsonInput) + "</pre>");
	try {
		  response = RestClient.postRequestWithCookieAndOnlyPathParm(url, map, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token);
		  Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
		return response;
	} catch (Exception e) {
		logger.error("Exception " + e);
		return response;
	}
}
	
	private static File updateCSV(String fileToUpdate, String replace,
		    int row, int col) {
		File inputFile = new File(fileToUpdate);
		List<String[]> csvBody;
		try {
			CSVReader reader = new CSVReader(new FileReader(inputFile), ',');
			csvBody = reader.readAll();
			csvBody.get(row)[col] = replace;
			reader.close();
			CSVWriter writer = new CSVWriter(new FileWriter(inputFile), ',');
			writer.writeAll(csvBody);
			writer.flush();
			writer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return inputFile;
		}
	
	public static Properties getproperty(String path) {
		Properties prop = new Properties();
		
		try {
			File file = new File(path);
			prop.load(new FileInputStream(file));
		} catch (IOException e) {
			logger.error("Exception " + e.getMessage());
		}
		return prop;
	}
public String generateSignatureWithRequest(String Request, String payload, String partnerId) {
	String singResponse = null;
	//call sing() 
	try {
	// singResponse =  sign(Request, false, true, false, null, getKeysDirPath(), partnerId);
	} catch (Exception e) {
		e.printStackTrace();
	}
	return singResponse;
	
	
		/*
		 * String signUrl = ApplnURI+props.getProperty("internalSignEndpoint"); String
		 * token = kernelAuthLib.getTokenByRole("regproc"); String encodedrequest =
		 * Base64.getEncoder().encodeToString(Request.getBytes()); String signJsonPath =
		 * MosipTestRunner.getGlobalResourcePath() +
		 * "/"+props.getProperty("signJsonPath"); String reqJsonString =
		 * FileUtil.readInput(signJsonPath); if(payload != null) reqJsonString =
		 * JsonPrecondtion.parseAndReturnJsonContent(reqJsonString, payload,
		 * "request.includePayload"); reqJsonString = reqJsonString.replace("$DATA$",
		 * encodedrequest); Response response=RestClient.postRequestWithCookie(signUrl,
		 * reqJsonString, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON,
		 * COOKIENAME, token); JSONObject res = new JSONObject(response.asString());
		 * JSONObject responseJson = new JSONObject(res.get("response").toString());
		 * if(responseJson.has("jwtSignedData")) return
		 * responseJson.get("jwtSignedData").toString(); else
		 * logger.error("No able to get the Signature from: "+signUrl+" with request: "
		 * +reqJsonString); return "Not able to Get Signature";
		 */
	
	}
	
/**
 * The method will modify json request with the given field values in map
 * 
 * @param listOfFiles
 * @param fieldvalue
 * @param propFileName
 * @param keywordinFile
 * @return true or false
 */
protected String modifyRequest(String inputJson, Map<String, String> fieldvalue, String propFileNameWithPath) {
	try {
				MessagePrecondtion jsonPrecon = new JsonPrecondtion();
				return jsonPrecon.parseAndUpdateJson(inputJson, fieldvalue, propFileNameWithPath);
		
	} catch (Exception e) {
		logger.error("Exception occured:" + e.getMessage());
		return inputJson;
	}
}

public static void copyPreregTestResource() {
	try {
		File source = new File(RunConfigUtil.getGlobalResourcePath() + "/preReg");
		File destination = new File(RunConfigUtil.getGlobalResourcePath() + "/"+RunConfigUtil.resourceFolderName);
		FileUtils.copyDirectoryToDirectory(source, destination);
		File config = new File(RunConfigUtil.getGlobalResourcePath() + "/config");
		FileUtils.copyDirectoryToDirectory(config, destination);
		logger.info("Copied the prereg test resource successfully");
	} catch (Exception e) {
		logger.error("Exception occured while copying the file: "+e.getMessage());
	}
}

public static void copyPrerequisiteTestResource() {
	try {
		File source = new File(RunConfigUtil.getGlobalResourcePath() + "/prerequisite");
		File destination = new File(RunConfigUtil.getGlobalResourcePath() + "/"+RunConfigUtil.resourceFolderName);
		FileUtils.copyDirectoryToDirectory(source, destination);
		File config = new File(RunConfigUtil.getGlobalResourcePath() + "/config");
		FileUtils.copyDirectoryToDirectory(config, destination);
		logger.info("Copied the prerequisite test resource successfully");
	} catch (Exception e) {
		logger.error("Exception occured while copying the file: "+e.getMessage());
	}
}

public static void copyIdrepoTestResource() {
	try {
		File source = new File(RunConfigUtil.getGlobalResourcePath() + "/idRepository");
		File destination = new File(RunConfigUtil.getGlobalResourcePath() + "/"+RunConfigUtil.resourceFolderName);
		FileUtils.copyDirectoryToDirectory(source, destination);
		logger.info("Copied the idrepository test resource successfully");
	} catch (Exception e) {
		logger.error("Exception occured while copying the file: "+e.getMessage());
	}
}
public static void copyResidentTestResource() {
	try {
		File source = new File(RunConfigUtil.getGlobalResourcePath() + "/resident");
		File destination = new File(RunConfigUtil.getGlobalResourcePath() + "/"+RunConfigUtil.resourceFolderName);
		FileUtils.copyDirectoryToDirectory(source, destination);
		logger.info("Copied the Resident test resource successfully");
	} catch (Exception e) {
		logger.error("Exception occured while copying the file: "+e.getMessage());
	}
}
public static void copyPartnerTestResource() {
	try {
		File source = new File(RunConfigUtil.getGlobalResourcePath() + "/partner");
		File destination = new File(RunConfigUtil.getGlobalResourcePath() + "/"+RunConfigUtil.resourceFolderName);
		FileUtils.copyDirectoryToDirectory(source, destination);
		logger.info("Copied the partner test resource successfully");
	} catch (Exception e) {
		logger.error("Exception occured while copying the file: "+e.getMessage());
	}
}

/*
 * public static ArrayList<JSONObject> getTestCase(TestCaseDTO testCaseDTO) {
 * String[] templateFields = testCaseDTO.getTemplateFields(); String input =
 * testCaseDTO.getInput(); String output = testCaseDTO.getOutput(); JSONObject
 * json = new JSONObject(input); JSONObject jsonop = new JSONObject(output);
 * 
 * // get all template fields for which translation is required
 * ArrayList<JSONObject> listofjsonObject = new ArrayList<>(); ArrayList<String>
 * list = new ArrayList<>(); Arrays.stream(templateFields).forEach(field ->
 * list.add(field)); // iterate on all required languages
 * 
 * for (String language : BaseTestCase.languageList) { JSONObject langjson = new
 * JSONObject(input); for (String fieldToConvert : list) { String valueToConvert
 * = json.getString(fieldToConvert); String translatedValue = valueToConvert;
 * langjson.remove(fieldToConvert); if (!language.equalsIgnoreCase("eng")) {
 * translatedValue = Translator.translate(language, valueToConvert); }
 * System.out.println("valueToConvert" + valueToConvert + "-----" +
 * translatedValue); langjson.put(fieldToConvert, translatedValue); }
 * langjson.remove("langCode"); langjson.put("langCode", language);
 * System.out.println(langjson.toString()); listofjsonObject.add(langjson); }
 * 
 * return listofjsonObject; }
 */
 

public static ArrayList<JSONObject> getInputTestCase(TestCaseDTO testCaseDTO) {
	String[] templateFields = testCaseDTO.getTemplateFields();
	String input = testCaseDTO.getInput();
	ArrayList<JSONObject> listofjsonObject = new ArrayList<>();
	listofjsonObject = inputJsonConversion(input, templateFields);
	//listofjsonObject = outputJsonConversion(output, templateFields);
	return listofjsonObject;
}

public static ArrayList<JSONObject> getOutputTestCase(TestCaseDTO testCaseDTO) {
	String[] templateFields = testCaseDTO.getTemplateFields();
	String output = testCaseDTO.getOutput();
	ArrayList<JSONObject> listofjsonObject = new ArrayList<>();
	listofjsonObject = outputJsonConversion(output, templateFields);
	return listofjsonObject;
}
public static ArrayList<JSONObject> inputJsonConversion(String input, String[] templateFields) {
	JSONObject inputJson = new JSONObject(input);
	return convertJson(templateFields, input, inputJson);
}
public static ArrayList<JSONObject> outputJsonConversion(String output, String[] templateFields) {
	JSONObject outputJson = new JSONObject(output);
	return convertJson(templateFields, output, outputJson);
}
private static ArrayList<JSONObject> convertJson(String[] templateFields, String template, JSONObject jsonObject) {
	// get all template fields for which translation is required
	
	ArrayList<JSONObject> listofjsonObject = new ArrayList<>();
	ArrayList<String> list = new ArrayList<>();
	Arrays.stream(templateFields).forEach(field -> list.add(field));
	// iterate on all required languages
	for (String language : BaseTestCase.languageList) {
		JSONObject langjson = new JSONObject(template);
		for (String fieldToConvert : list) {
			Boolean isFilterRequired = false;
			String valueToConvert = null;
			String translatedValue = null;
			if(jsonObject.has(fieldToConvert)) {
				 valueToConvert = jsonObject.getString(fieldToConvert);
				 translatedValue = valueToConvert;
			}
			else if(jsonObject.has("filters") && jsonObject.getJSONArray("filters").length()>=1) {
				 String filterValueToConvert = jsonObject.getJSONArray("filters").get(0).toString();
				 JSONObject filtervalue = new JSONObject(filterValueToConvert);
				 if(filtervalue.has(fieldToConvert)) {
					 valueToConvert= filtervalue.getString(fieldToConvert);
					 translatedValue = valueToConvert; 
					 isFilterRequired = true;
				 }
			}
			
			//langjson.remove(fieldToConvert);
			if (!language.equalsIgnoreCase("eng") && valueToConvert!=null) {
				translatedValue = Translator.translate(language, valueToConvert);
			}
			if(isFilterRequired) {
				String filterValueToConvert = jsonObject.getJSONArray("filters").get(0).toString();
				 JSONObject filtervalue = new JSONObject(filterValueToConvert);
				 String filtervalue1 = filtervalue.toString().replace(valueToConvert, translatedValue);
				 JSONObject filteredvalue = new JSONObject(filtervalue1);
				 JSONArray filtertransvalue = new JSONArray();
				 filtertransvalue.put(filteredvalue);
				 //JSONArray a = abc.toJSONArray(new JSONArray(filtervalue1));
				// JSONArray a = new JSONArray(filtervalue1);
				 langjson.remove("filters");
				 langjson.put("filters", filtertransvalue);
				 
			}
			//System.out.println("valueToConvert" + valueToConvert + "-----" + translatedValue);
			//put that translated value if and only if that field is present in template(input/output)
			else if(!isFilterRequired && !langjson.isNull(fieldToConvert) || translatedValue!=null )
			langjson.put(fieldToConvert, translatedValue);
		}
		
		/*if(langjson.has("data")) {
			JSONObject rmLanCode = new JSONObject(langjson.getJSONArray("data").get(0).toString());
			rmLanCode.remove("langCode");
			rmLanCode.put("langCode", language);
			langjson.put("data", rmLanCode);
		}*/
		if(langjson.has("langCode")){
			langjson.remove("langCode");
			langjson.put("langCode", language);
		}
		else if(langjson.has("langcode")) {
			langjson.remove("langcode");
			langjson.put("langcode", language);
		}
		else {
			langjson.remove("languageCode");
			langjson.put("languageCode", language);
		}
		
		System.out.println(langjson.toString());
		listofjsonObject.add(langjson);
	}
	return listofjsonObject;
}

public String sign(String dataToSign, boolean includePayload,
		boolean includeCertificate, boolean includeCertHash, String certificateUrl, String dirPath, String partnerId) throws JoseException, NoSuchAlgorithmException, UnrecoverableEntryException, 
		KeyStoreException, CertificateException, IOException {
//	KeyMgrUtil keyMgrUtil = new KeyMgrUtil();
//	JsonWebSignature jwSign = new JsonWebSignature();
//	PrivateKeyEntry keyEntry = null;//keyMgrUtil.getKeyEntry(dirPath, partnerId);
//	if (Objects.isNull(keyEntry)) {
//		throw new KeyStoreException("Key file not available for partner type: " + partnerId);
//	}
//
//	PrivateKey privateKey = keyEntry.getPrivateKey();
//
//	X509Certificate x509Certificate = keyMgrUtil.getCertificateEntry(dirPath, partnerId);
//
//	if(x509Certificate == null) {
//		x509Certificate = (X509Certificate) keyEntry.getCertificate();
//	}
//
//	if (includeCertificate)
//		jwSign.setCertificateChainHeaderValue(new X509Certificate[] { x509Certificate });
//
//	if (includeCertHash)
//		jwSign.setX509CertSha256ThumbprintHeaderValue(x509Certificate);
//
//	if (Objects.nonNull(certificateUrl))
//		jwSign.setHeader("x5u", certificateUrl);
//
//	jwSign.setPayload(dataToSign);
//	jwSign.setAlgorithmHeaderValue(SIGN_ALGO);
//	jwSign.setKey(privateKey);
//	jwSign.setDoKeyValidation(false);
//	if (includePayload)
//		return jwSign.getCompactSerialization();
//
//	return jwSign.getDetachedContentCompactSerialization();

	return null;
}

public String getKeysDirPath() {
	//String path = props.getProperty("getCertificatePath");
	environment = System.getProperty("env.user");
	String path = "C:/Users/" + System.getProperty("user.name")
	+ "/.m2" + "/IDA-"+environment+".mosip.net";
	path=path.replace("////", "\\");
	return new File(path).getAbsolutePath();
}

public static String buildIdentityRequest(String identityRequest) {
	if (identityRequest.contains("$DATETIME$"))
		identityRequest = identityRequest.replace("$DATETIME$", generateCurrentUTCTimeStamp());
	
	if(identityRequest.contains("$FACE$"))
		identityRequest = identityRequest.replace("$FACE$", propsBio.getProperty("FaceBioValue"));
	if(identityRequest.contains("$RIGHTIRIS$"))
		identityRequest = identityRequest.replace("$RIGHTIRIS$", propsBio.getProperty("RightIrisBioValue"));
	if(identityRequest.contains("$LEFTIRIS$"))
		identityRequest = identityRequest.replace("$LEFTIRIS$", propsBio.getProperty("LeftIrisBioValue"));
	if(identityRequest.contains("$RIGHTTHUMB$"))
		identityRequest = identityRequest.replace("$RIGHTTHUMB$", propsBio.getProperty("RightThumbBioValue"));
	if(identityRequest.contains("$LEFTTHUMB$"))
		identityRequest = identityRequest.replace("$LEFTTHUMB$", propsBio.getProperty("LeftThumbBioValue"));
	if(identityRequest.contains("$RIGHTLITTLEFINGER$"))
		identityRequest = identityRequest.replace("$RIGHTLITTLEFINGER$", propsBio.getProperty("RightLittleFingerBioValue"));
	if(identityRequest.contains("$RIGHTMIDDLEFINGER$"))
		identityRequest = identityRequest.replace("$RIGHTMIDDLEFINGER$", propsBio.getProperty("RightMiddleFinger"));
	if(identityRequest.contains("$RIGHTRINGFINGER$"))
		identityRequest = identityRequest.replace("$RIGHTRINGFINGER$", propsBio.getProperty("RightRingFingerBioValue"));
	if(identityRequest.contains("$RIGHTINDEXFINGER$"))
		identityRequest = identityRequest.replace("$RIGHTINDEXFINGER$", propsBio.getProperty("RightIndexFingerBioValue"));
	if(identityRequest.contains("$LEFTLITTLEFINGER$"))
		identityRequest = identityRequest.replace("$LEFTLITTLEFINGER$", propsBio.getProperty("LeftLittleFingerBioValue"));
	if(identityRequest.contains("$LEFTINDEXFINGER$"))
		identityRequest = identityRequest.replace("$LEFTINDEXFINGER$", propsBio.getProperty("LeftIndexFingerBioValue"));
	if(identityRequest.contains("$LEFTMIDDLEFINGER$"))
		identityRequest = identityRequest.replace("$LEFTMIDDLEFINGER$", propsBio.getProperty("LeftMiddleFingerBioValue"));
	if(identityRequest.contains("$LEFTRINGFINGER$"))
		identityRequest = identityRequest.replace("$LEFTRINGFINGER$", propsBio.getProperty("LeftRingFingerBioValue"));
	return identityRequest;
}

public static TestCaseDTO filterHbs(TestCaseDTO testCaseDTO) {
if(BaseTestCase.languageList.size()==2) {
		
		if (Boolean.parseBoolean(props.getProperty("V3ENV")) == true) {
			if (testCaseDTO.getInputTemplate().contains("$LANGNUMBER$"))
				testCaseDTO.setInputTemplate(
						testCaseDTO.getInputTemplate().replace("$LANGNUMBER$", "DOUBLE_V3"));
			if (testCaseDTO.getOutputTemplate().contains("$LANGNUMBER$"))
				testCaseDTO.setOutputTemplate(
						testCaseDTO.getOutputTemplate().replace("$LANGNUMBER$", "DOUBLE_V3"));
		} else {
			if (testCaseDTO.getInputTemplate().contains("$LANGNUMBER$"))
				testCaseDTO.setInputTemplate(
						testCaseDTO.getInputTemplate().replace("$LANGNUMBER$", "DOUBLE"));
			if (testCaseDTO.getOutputTemplate().contains("$LANGNUMBER$"))
				testCaseDTO.setOutputTemplate(
						testCaseDTO.getOutputTemplate().replace("$LANGNUMBER$", "DOUBLE"));
		}
		
	}

	
	else if(BaseTestCase.languageList.size()==3) {
		if (testCaseDTO.getInputTemplate().contains("$LANGNUMBER$"))
			testCaseDTO.setInputTemplate(
					testCaseDTO.getInputTemplate().replace("$LANGNUMBER$", "TRIPLE"));
		if (testCaseDTO.getOutputTemplate().contains("$LANGNUMBER$"))
			testCaseDTO.setOutputTemplate(
					testCaseDTO.getOutputTemplate().replace("$LANGNUMBER$", "TRIPLE"));
	}
	
	else if(BaseTestCase.languageList.size()==1) {
		if (testCaseDTO.getInputTemplate().contains("$LANGNUMBER$"))
			testCaseDTO.setInputTemplate(
					testCaseDTO.getInputTemplate().replace("$LANGNUMBER$", "SINGLE"));
		if (testCaseDTO.getOutputTemplate().contains("$LANGNUMBER$"))
			testCaseDTO.setOutputTemplate(
					testCaseDTO.getOutputTemplate().replace("$LANGNUMBER$", "SINGLE"));
	}
	
	else {
		if (testCaseDTO.getInputTemplate().contains("$LANGNUMBER$"))
			testCaseDTO.setInputTemplate(
					testCaseDTO.getInputTemplate().replace("$LANGNUMBER$", "DEFAULT"));
		if (testCaseDTO.getOutputTemplate().contains("$LANGNUMBER$"))
			testCaseDTO.setOutputTemplate(
					testCaseDTO.getOutputTemplate().replace("$LANGNUMBER$", "DEFAULT"));
	}
	return testCaseDTO;
}

public static List<String> getAppointmentDetails(Response fetchCenterResponse) {
	int countCenterDetails = 0;
	List<String> appointmentDetails = new ArrayList<>();
	try {
		countCenterDetails = fetchCenterResponse.jsonPath().getList("response.centerDetails").size();
	} catch (NullPointerException e) {
		Assert.assertTrue(false, "Failed to fetch registration details while booking appointment");
	}
	for (int i = 0; i < countCenterDetails; i++) {
		try {
			fetchCenterResponse.jsonPath().get("response.centerDetails[" + i + "].timeSlots[0].fromTime")
					.toString();
		} catch (NullPointerException e) {
			continue;
		}
		
		try {
			appointmentDetails.add(fetchCenterResponse.jsonPath().get("response.regCenterId").toString());
			appointmentDetails
					.add(fetchCenterResponse.jsonPath().get("response.centerDetails[" + i + "].date").toString());
			appointmentDetails.add(fetchCenterResponse.jsonPath()
					.get("response.centerDetails[" + i + "].timeSlots[0].fromTime").toString());
			appointmentDetails.add(fetchCenterResponse.jsonPath()
					.get("response.centerDetails[" + i + "].timeSlots[0].toTime").toString());
		} catch (NullPointerException e) {
			Assert.assertTrue(false, "Failed to fetch registration details while booking appointment");
		}
		break;
	}
	return appointmentDetails;
}

}
